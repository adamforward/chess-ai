# this is the beggining of main


# searchFunctionTest=board()
# searchFunctionTest.allMovesGen()
# searchFunctionTest.AIAdvantageEval()
# searchFunctionTest.printInfo()
# s=treeNode(searchFunctionTest,0, None)

# minimax=search(s, 3, -5000)
# print("minimax value")
# print(minimax)
# c=input()
# game2 = board()
# x = False
# while x == True:
#     # print("openingMoveTree(",game2.whitePieces,",", game2.blackPieces, ",", game2.whiteIndexes, ",", game2.blackIndexes, ")")
#     game2.allMovesGen()
#     game2.printInfo()
#     if (game2.turn % 2 == 0):
#         print("white turn")
#     else:
#         print("black turn")
#     print("what piece do you want to move?")
#     d = False
#     a = ""
#     b = ""
#     while d == False:
#         a = input()
#         print("indexes?")
#         b = input()
#         c = reverseMapping(b)
#         if game2.turn % 2 == 0:
#             if a in game2.whitePieces and c in game2.whiteaVailableMoves[a]:
#                 d = True
#             else:
#                 print("something is wrong")
#         else:
#             if a in game2.blackPieces and c in game2.blackAvailableMoves[a]:
#                 d = True
#             else:
#                 print("something is wrong")
#     game2.move(a, c)
#     # p5 E4
#     # p3 C5
#     # k2 F3
#     # p4 D6
#     # p4 D4
#     # p5 D5


# theGame = board()
# theGame.inPlay = True
# if (theGame.turn % 2 == 0):
#     print("white turn")
#     theGame.printInfo()
#     playerSTR = ""
#     print("Enter the indexes of the piece you want to move. Example: H4")
#     while playerValidPiece == False:
#         playerPiece = input()
#         playerIndexes = reverseMapping(playerPiece)
#         if playerIndexes in theGame.blackIToP:
#             playerSTR = theGame.blackIToP[playerIndexes]
#             if len(theGame.blackAvailableMoves[playerSTR]) > 0:
#                 playerValidPiece = True
#                 playerSTR = theGame.blackIToP[playerIndexes]
#             else:
#                 print("Please enter a piece that can move.")
#         else:
#             print("Please enter valid indexes of a black piece.")
#         print("Which indexes would you like to move it to?")
#         while playerValidMove == False:
#             playerMove = input()
#             playerMoveIndexes = reverseMapping(playerMove)  # AI team is black
#             if playerMoveIndexes in theGame.blackAvailableMoves[playerSTR]:
#                 validMovePiece = True
#                 break
#             else:
#                 print("Please enter valid indexes to move to")
# else:
#     playerMistake = True
#     while playerMistake == True:
#         playerMoveIndexes = -1
#         playerValidPiece = False
#         playerValidMove = False
#         theGame.printMirrorBoard()
#         theGame.allMovesGen()
#         playerSTR = ""
#         print("Enter the indexes of the piece you want to move. Example: H4")
#         while playerValidPiece == False:
#             playerPiece = input()
#             playerIndexes = reverseMapping(playerPiece)
#             if playerIndexes in theGame.blackIToP:
#                 playerSTR = theGame.blackIToP[playerIndexes]
#                 if len(theGame.blackAvailableMoves[playerSTR]) > 0:
#                     playerValidPiece = True
#                     layerSTR = theGame.blackIToP[playerIndexes]
#                 else:
#                     print("Please enter a piece that can move.")
#             else:
#                 print("Please enter valid indexes of a black piece.")
#                 print("Which indexes would you like to move it to?")
#                 while playerValidMove == False:
#                     playerMove = input()
#                     playerMoveIndexes = reverseMapping(
#                         playerMove)  # AI team is black
#                     if playerMoveIndexes in theGame.blackAvailableMoves[playerSTR]:
#                         validMovePiece = True
#                         break
#                     else:
#                         print("Please enter valid indexes to move to")
#                 print("Are you sure you want to make this move? Type in CHANGE if you would like to select a different move. Press enter to continue.")
#                 con = input()
#                 if con == "CHANGE":
#                     continue
#                 else:
#                     playerMistake = False
#                     theGame.move(playerSTR, playerMoveIndexes)
#                     theGame.allMovesGen()
#                     theGame.AIAdvantageEval()


# print("Which team would you like to play as? Enter W for white or B for black")
# validPTeam = False
# playerTeam = ""
# while validPTeam == False:
#     playerTeam = input()
#     if playerTeam == "W" or playerTeam == "B":
#         validPTeam = True
#     else:
#         print("Please enter a valid team")
# if playerTeam == "W":
#     theGame.AIteamIsWhite = False
# else:
#     theGame.AIteamIsWhite = True


# if theGame.AIteamIsWhite == True:

#     while theGame.inPlay == True:
#         if theGame.turn % 2 == 0:
#             AIMove = AImove(theGame)
#             print(
#                 mapping(theGame.whiteIndexes[AIMove[0]]), ' to ', mapping(AIMove[1]))
#             theGame.move(AIMove[0], AIMove[1])
#             theGame.allMovesGen()
#             theGame.AIAdvantageEval()
#         else:
#             playerMistake = True
#             while playerMistake == True:
#                 playerMoveIndexes = -1
#                 playerValidPiece = False
#                 playerValidMove = False
#                 theGame.printMirrorBoard()
#                 theGame.allMovesGen()
#                 playerSTR = ""
#                 print("Enter the indexes of the piece you want to move. Example: H4")
#                 while playerValidPiece == False:
#                     playerPiece = input()
#                     playerIndexes = reverseMapping(playerPiece)
#                     if playerIndexes in theGame.blackIToP:
#                         playerSTR = theGame.blackIToP[playerIndexes]
#                         if len(theGame.blackAvailableMoves[playerSTR]) > 0:
#                             playerValidPiece = True
#                             playerSTR = theGame.blackIToP[playerIndexes]
#                         else:
#                             print("Please enter a piece that can move.")
#                     else:
#                         print("Please enter valid indexes of a black piece.")
#                 print("Which indexes would you like to move it to?")
#                 while playerValidMove == False:
#                     playerMove = input()
#                     playerMoveIndexes = reverseMapping(
#                         playerMove)  # AI team is black
#                     if playerMoveIndexes in theGame.blackAvailableMoves[playerSTR]:
#                         validMovePiece = True
#                         break
#                     else:
#                         print("Please enter valid indexes to move to")
#                 print("Are you sure you want to make this move? Type in CHANGE if you would like to select a different move. Press enter to continue.")
#                 con = input()
#                 if con == "CHANGE":
#                     continue
#                 else:
#                     playerMistake = False
#                     theGame.move(playerSTR, playerMoveIndexes)
#                     theGame.allMovesGen()
#                     theGame.AIAdvantageEval()
# else:
#     while theGame.inPlay == True:
#         if theGame.turn % 2 == 1:
#             AIMove = AImove(theGame)
#             print(
#                 mapping(theGame.blackIndexes[AIMove[0]]), ' to ', mapping(AIMove[1]))
#             theGame.move(AIMove[0], AIMove[1])
#             theGame.allMovesGen()
#             theGame.AIAdvantageEval()
#         else:
#             playerMistake = True
#             while playerMistake == True:
#                 playerMoveIndexes = -1
#                 playerValidPiece = False
#                 playerValidMove = False
#                 theGame.allMovesGen()
#                 theGame.printBoard()
#                 playerSTR = ""
#                 print("Enter the indexes of the piece you want to move. Example: H4")
#                 while playerValidPiece == False:
#                     playerPiece = input()
#                     playerIndexes = reverseMapping(playerPiece)
#                     if playerIndexes in theGame.whiteIToP:
#                         playerSTR = theGame.whiteIToP[playerIndexes]
#                         if len(theGame.whiteaVailableMoves[playerSTR]) > 0:
#                             playerValidPiece = True
#                             playerSTR = theGame.whiteIToP[playerIndexes]
#                         else:
#                             print("Please enter a piece that can move.")
#                     else:
#                         print("Please enter valid indexes of a white piece.")
#                 print("Which indexes would you like to move it to?")
#             while playerValidMove == False:
#                 playerMove = input()
#                 playerMoveIndexes = reverseMapping(
#                     playerMove)  # AI team is black
#                 if playerMoveIndexes in theGame.whiteaVailableMoves[playerSTR]:
#                     validMovePiece = True
#                     break
#             else:
#                 print("Please enter valid indexes to move to")
#                 print("Are you sure you want to make this move? Type in CHANGE if you would like to select a different move. Press enter to continue.")
#                 con = input()
#                 if con == "CHANGE":
#                     continue
#                 else:
#                     playerMistake = False
#                     theGame.move(playerSTR, playerMoveIndexes)
#                     theGame.allMovesGen()
#                     theGame.AIAdvantageEval()
# theGame.AIAdvantageEval()
# a = []
# b = a[4]
# if theGame.AIAdvantage == 0:
#     print("It's a tie")
# elif theGame.AIAdvantage < 0:
#     print("Checkmate, you win. Congradulations!!!")
# else:
#     print("Checkmate, you lose. Better luck next time!!!")
# # both boards are printed correctly, working on getting the player to move correctly
// struct send-to-fe {
//     player-av-moves:Vec<Vec<i32>>,//first index for piece, last indexes for av moves
//     ai-m:Vec<i32>,
//     check:bool,
//     game-over:bool,
// }
// fn get-moves-fe(b:Board, white:bool) -> Vec<Vec<i32>>{
//     let moves=Vec::new();
//     if b.ai_team_is_white==true{
//         for i in b.black_pieces{
//             let pieces=Vec::new();
//             pieces.push(i1=b.black_indexes[i]);
//             let re=concat_arrays!(pieces, b.black_available_moves[i]);
//             moves.push(re);
//         }
//     }
//     else{
//         for i in b.white_pieces{
//             let pieces=Vec::new();
//             pieces.push(i1=b.white_indexes[i]);
//             let re=concat_arrays!(pieces, b.white_available_moves[i]);
//             moves.push(re);
//         }
//     }
//     moves
// }
// fn startGame(difficulty:i32, iswhite:bool) -> send-to-fe{
//     let ai-m=Vec<i32>vec![-1];
//     let b=initBoard(iswhite);
//     print_info(b)

// }
// fn aiMove(difficulty:i32) -> send-to-fe{

// }


    





    // type Board {
    //     moves_log: Vec<Move>, // Define a Move struct as needed
    //     in_check_stored: bool,
    //     ai_team_is_white: bool,
    //     in_play: bool,
    //     full_board: Vec<Vec<Piece>>, // Define a Piece struct as needed
    //     turn: i32,
    //     black_indexes: HashMap<String, i32>,
    //     white_indexes: HashMap<String, i32>,
    //     black_i_to_p: HashMap<i32, String>,
    //     white_i_to_p: HashMap<i32, String>,
    //     black_points: i32,
    //     white_points: i32,
    //     white_pieces: Vec<String>,
    //     black_pieces: Vec<String>,
    //     white_available_moves: HashMap<String, Vec<Move>>, // Define a Move struct as needed
    //     black_available_moves: HashMap<String, Vec<Move>>, // Define a Move struct as needed
    //     white_prime: i32,
    //     black_prime: i32,
    //     white_prime1: i32,
    //     black_prime1: i32,
    //     prime2: i32,
    //     ai_advantage: i64,
    // }


//     self.blackIndexes = {"r1": 0, "r2": 7, "b1": 2, "b2": 5, "k1": 1, "k2": 6, "K": 4, "q": 3,
//                              "p1": 10, "p2": 11, "p3": 12, "p4": 13, "p5": 14, "p6": 15, "p7": 16, "p8": 17}
//         self.whiteIndexes = {"r1": 70, "r2": 77, "b1": 72, "b2": 75, "k1": 71, "k2": 76, "K": 74, "q": 73,
//                              "p1": 60, "p2": 61, "p3": 62, "p4": 63, "p5": 64, "p6": 65, "p7": 66, "p8": 67}
//         self.blackIToP = {0: "r1", 7: "r2", 2: "b1", 5: "b2", 1: "k1", 6: "k2", 4: "K", 3: "q",
//                           10: "p1", 11: "p2", 12: "p3", 13: "p4", 14: "p5", 15: "p6", 16: "p7", 17: "p8"}  # important in cutting down on runtime in many methods used below.
//         self.whiteIToP = {70: "r1", 77: "r2", 72: "b1", 75: "b2", 71: "k1", 76: "k2", 74: "K", 73: "q",
//                           60: "p1", 61: "p2", 62: "p3", 63: "p4", 64: "p5", 65: "p6", 66: "p7", 67: "p8"}  # index to pieces

