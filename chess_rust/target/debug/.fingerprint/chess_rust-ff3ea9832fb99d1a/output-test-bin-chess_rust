{"$message_type":"diagnostic","message":"expected `;`, found keyword `for`","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":2634,"byte_end":2637,"line_start":63,"line_end":63,"column_start":5,"column_end":8,"is_primary":false,"text":[{"text":"    for i in advantage_map.iter_mut{","highlight_start":5,"highlight_end":8}],"label":"unexpected token","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":2629,"byte_end":2629,"line_start":62,"line_end":62,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"    let re:Vec<AdavantageMap>=vec![]","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"add `;` here","code":null,"level":"help","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":2629,"byte_end":2629,"line_start":62,"line_end":62,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"    let re:Vec<AdavantageMap>=vec![]","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected `;`, found keyword `for`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/search_functions.rs:62:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let re:Vec<AdavantageMap>=vec![]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: add `;` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for i in advantage_map.iter_mut{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected token\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `,`, `:`, or `}`, found `::`","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":3427,"byte_end":3429,"line_start":93,"line_end":93,"column_start":35,"column_end":37,"is_primary":true,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":35,"highlight_end":37}],"label":"expected one of `,`, `:`, or `}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":3424,"byte_end":3427,"line_start":93,"line_end":93,"column_start":32,"column_end":35,"is_primary":false,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":32,"highlight_end":35}],"label":"while parsing this struct field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":3415,"byte_end":3423,"line_start":93,"line_end":93,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":23,"highlight_end":31}],"label":"while parsing this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `,`, `:`, or `}`, found `::`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/search_functions.rs:93:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        game.children=TreeNode{Vec::New, game, i.board, game.level+1}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `,`, `:`, or `}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `,`, `:`, or `}`, found `.`","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":3441,"byte_end":3442,"line_start":93,"line_end":93,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":49,"highlight_end":50}],"label":"expected one of `,`, `:`, or `}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":3440,"byte_end":3441,"line_start":93,"line_end":93,"column_start":48,"column_end":49,"is_primary":false,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":48,"highlight_end":49}],"label":"while parsing this struct field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":3415,"byte_end":3423,"line_start":93,"line_end":93,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":23,"highlight_end":31}],"label":"while parsing this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try naming a field","code":null,"level":"help","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":3440,"byte_end":3440,"line_start":93,"line_end":93,"column_start":48,"column_end":48,"is_primary":true,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":48,"highlight_end":48}],"label":null,"suggested_replacement":"i: ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `,`, `:`, or `}`, found `.`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/search_functions.rs:93:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        game.children=TreeNode{Vec::New, game, i.board, game.level+1}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `,`, `:`, or `}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try naming a field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        game.children=TreeNode{Vec::New, game, \u001b[0m\u001b[0m\u001b[38;5;10mi: \u001b[0m\u001b[0mi.board, game.level+1}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `,`, `:`, or `}`, found `.`","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":3453,"byte_end":3454,"line_start":93,"line_end":93,"column_start":61,"column_end":62,"is_primary":true,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":61,"highlight_end":62}],"label":"expected one of `,`, `:`, or `}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":3449,"byte_end":3453,"line_start":93,"line_end":93,"column_start":57,"column_end":61,"is_primary":false,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":57,"highlight_end":61}],"label":"while parsing this struct field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":3415,"byte_end":3423,"line_start":93,"line_end":93,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":23,"highlight_end":31}],"label":"while parsing this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try naming a field","code":null,"level":"help","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":3449,"byte_end":3449,"line_start":93,"line_end":93,"column_start":57,"column_end":57,"is_primary":true,"text":[{"text":"        game.children=TreeNode{Vec::New, game, i.board, game.level+1}","highlight_start":57,"highlight_end":57}],"label":null,"suggested_replacement":"game: ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `,`, `:`, or `}`, found `.`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/search_functions.rs:93:61\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        game.children=TreeNode{Vec::New, game, i.board, game.level+1}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `,`, `:`, or `}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try naming a field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        game.children=TreeNode{Vec::New, game, i.board, \u001b[0m\u001b[0m\u001b[38;5;10mgame: \u001b[0m\u001b[0mgame.level+1}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `,`, `:`, or `}`, found `!`","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":4795,"byte_end":4796,"line_start":138,"line_end":138,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":30,"highlight_end":31}],"label":"expected one of `,`, `:`, or `}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":4792,"byte_end":4795,"line_start":138,"line_end":138,"column_start":27,"column_end":30,"is_primary":false,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":27,"highlight_end":30}],"label":"while parsing this struct field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":4783,"byte_end":4791,"line_start":138,"line_end":138,"column_start":18,"column_end":26,"is_primary":false,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":18,"highlight_end":26}],"label":"while parsing this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `,`, `:`, or `}`, found `!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/search_functions.rs:138:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let tree=TreeNode{vec![], vec![], i.board, 1}; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `,`, `:`, or `}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `,`, `:`, or `}`, found `!`","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":4803,"byte_end":4804,"line_start":138,"line_end":138,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":38,"highlight_end":39}],"label":"expected one of `,`, `:`, or `}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":4800,"byte_end":4803,"line_start":138,"line_end":138,"column_start":35,"column_end":38,"is_primary":false,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":35,"highlight_end":38}],"label":"while parsing this struct field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":4783,"byte_end":4791,"line_start":138,"line_end":138,"column_start":18,"column_end":26,"is_primary":false,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":18,"highlight_end":26}],"label":"while parsing this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `,`, `:`, or `}`, found `!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/search_functions.rs:138:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let tree=TreeNode{vec![], vec![], i.board, 1}; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `,`, `:`, or `}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `,`, `:`, or `}`, found `.`","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":4809,"byte_end":4810,"line_start":138,"line_end":138,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":44,"highlight_end":45}],"label":"expected one of `,`, `:`, or `}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":4808,"byte_end":4809,"line_start":138,"line_end":138,"column_start":43,"column_end":44,"is_primary":false,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":43,"highlight_end":44}],"label":"while parsing this struct field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":4783,"byte_end":4791,"line_start":138,"line_end":138,"column_start":18,"column_end":26,"is_primary":false,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":18,"highlight_end":26}],"label":"while parsing this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try naming a field","code":null,"level":"help","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":4808,"byte_end":4808,"line_start":138,"line_end":138,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"i: ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `,`, `:`, or `}`, found `.`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/search_functions.rs:138:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let tree=TreeNode{vec![], vec![], i.board, 1}; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `,`, `:`, or `}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try naming a field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let tree=TreeNode{vec![], vec![], \u001b[0m\u001b[0m\u001b[38;5;10mi: \u001b[0m\u001b[0mi.board, 1}; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected identifier, found `1`","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":4817,"byte_end":4818,"line_start":138,"line_end":138,"column_start":52,"column_end":53,"is_primary":true,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":52,"highlight_end":53}],"label":"expected identifier","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/search_functions.rs","byte_start":4783,"byte_end":4791,"line_start":138,"line_end":138,"column_start":18,"column_end":26,"is_primary":false,"text":[{"text":"        let tree=TreeNode{vec![], vec![], i.board, 1}; ","highlight_start":18,"highlight_end":26}],"label":"while parsing this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected identifier, found `1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/search_functions.rs:138:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let tree=TreeNode{vec![], vec![], i.board, 1}; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected identifier\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"float literals must have an integer part","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":4995,"byte_end":4997,"line_start":142,"line_end":142,"column_start":24,"column_end":26,"is_primary":true,"text":[{"text":"            alpha_beta=.5-outcome; ","highlight_start":24,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"must have an integer part","code":null,"level":"help","spans":[{"file_name":"chess_rust/src/search_functions.rs","byte_start":4995,"byte_end":4997,"line_start":142,"line_end":142,"column_start":24,"column_end":26,"is_primary":true,"text":[{"text":"            alpha_beta=.5-outcome; ","highlight_start":24,"highlight_end":26}],"label":null,"suggested_replacement":"0.5","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: float literals must have an integer part\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/search_functions.rs:142:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            alpha_beta=.5-outcome; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: must have an integer part: `0.5`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unexpected closing delimiter: `}`","code":null,"level":"error","spans":[{"file_name":"chess_rust/src/upper_move_function_helpers.rs","byte_start":158,"byte_end":158,"line_start":3,"line_end":3,"column_start":49,"column_end":49,"is_primary":false,"text":[{"text":"pub fn king_move_eliminator_white(board: Board) {","highlight_start":49,"highlight_end":49}],"label":"this delimiter might not be properly closed...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/upper_move_function_helpers.rs","byte_start":282,"byte_end":282,"line_start":8,"line_end":8,"column_start":5,"column_end":5,"is_primary":false,"text":[{"text":"    }","highlight_start":5,"highlight_end":5}],"label":"...as it matches this but it has different indentation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"chess_rust/src/upper_move_function_helpers.rs","byte_start":284,"byte_end":285,"line_start":9,"line_end":9,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"unexpected closing delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unexpected closing delimiter: `}`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mchess_rust/src/upper_move_function_helpers.rs:9:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn king_move_eliminator_white(board: Board) {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis delimiter might not be properly closed...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...as it matches this but it has different indentation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munexpected closing delimiter\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 10 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 10 previous errors\u001b[0m\n\n"}
